const sequelize = require('../config/database');
const User = require('../models/User');
const Client = require('../models/client');
const Check = require('../models/check');
const Visit = require('../models/visit');
const Sale = require('../models/sale');
const Goal = require('../models/goal');
const { v4: uuidv4 } = require('uuid');

/**
 * Script para validar inser√ß√µes no banco de dados
 * Testa inser√ß√µes em todas as tabelas principais para garantir que n√£o ocorram erros
 */

async function validateDatabase() {
    try {
        console.log('üîç Iniciando valida√ß√£o do banco de dados...');
        
        // Criar conex√£o com o banco
        console.log('\nüìä Verificando conex√£o com o banco de dados...');
        await sequelize.authenticate();
        console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!');

        // Verificar √≠ndices na tabela users
        console.log('\nüìä Verificando √≠ndices na tabela users...');
        const userIndexes = await sequelize.query(`
            SELECT COUNT(*) as total_indexes
            FROM INFORMATION_SCHEMA.STATISTICS
            WHERE TABLE_SCHEMA = :schema
            AND TABLE_NAME = 'users'
        `, {
            replacements: { schema: sequelize.config.database },
            type: sequelize.QueryTypes.SELECT
        });

        const totalUserIndexes = userIndexes[0].total_indexes;
        console.log(`üìà Total de √≠ndices na tabela users: ${totalUserIndexes}`);
        
        if (totalUserIndexes > 20) {
            console.log('‚ö†Ô∏è ATEN√á√ÉO: Ainda h√° muitos √≠ndices na tabela users.');
        } else {
            console.log('‚úÖ N√∫mero de √≠ndices na tabela users est√° dentro do limite seguro!');
        }

        // Testar inser√ß√£o de dados em todas as tabelas principais
        console.log('\nüß™ Testando inser√ß√µes no banco de dados...');

        // 1. Testar inser√ß√£o de usu√°rio
        console.log('\nüìù Testando inser√ß√£o na tabela users...');
        const testUser = await User.create({
            name: 'Usu√°rio de Teste',
            email: `teste_${Date.now()}@example.com`,
            password: 'senha123',
            role: 'user',
            is_active: true,
            created_at: new Date(),
            updated_at: new Date()
        });
        console.log(`‚úÖ Usu√°rio criado com sucesso! ID: ${testUser.id}`);

        // 2. Testar inser√ß√£o de cliente
        console.log('\nüìù Testando inser√ß√£o na tabela clients...');
        const testClient = await Client.create({
            name: 'Cliente de Teste',
            address: 'Endere√ßo de Teste',
            latitude: -23.5505,
            longitude: -46.6333,
            type: 'Farm√°cia',
            created_by: testUser.id,
            created_at: new Date(),
            updated_at: new Date()
        });
        console.log(`‚úÖ Cliente criado com sucesso! ID: ${testClient.id}`);

        // 3. Testar inser√ß√£o de check
        console.log('\nüìù Testando inser√ß√£o na tabela checks...');
        const testCheck = await Check.create({
            user_id: testUser.id,
            client_id: testClient.id,
            check_in_time: new Date(),  // Campo obrigat√≥rio
            latitude_in: -23.5505,      // Campo obrigat√≥rio
            longitude_in: -46.6333,     // Campo obrigat√≥rio
            status: 'conclu√≠do',        // Campo obrigat√≥rio
            created_at: new Date(),
            updated_at: new Date()
        });
        console.log(`‚úÖ Check criado com sucesso! ID: ${testCheck.id}`);

        // 4. Testar inser√ß√£o de visita
        console.log('\nüìù Testando inser√ß√£o na tabela visits...');
        const testVisit = await Visit.create({
            user_id: testUser.id,
            check_id: testCheck.id,
            observations: 'Observa√ß√£o de teste',
            created_at: new Date(),
            updated_at: new Date()
        });
        console.log(`‚úÖ Visita criada com sucesso! ID: ${testVisit.id}`);

        // 5. Testar inser√ß√£o de venda
        console.log('\nüìù Testando inser√ß√£o na tabela sales...');
        const testSale = await Sale.create({
            user_id: testUser.id,
            client_id: testClient.id,
            factory: 'F√°brica Teste',
            quantity: 10,
            value: 100.50,
            week: 1,
            month: 8,
            year: 2025,
            created_at: new Date(),
            updated_at: new Date()
        });
        console.log(`‚úÖ Venda criada com sucesso! ID: ${testSale.id}`);

        // 6. Testar inser√ß√£o de meta
        console.log('\nüìù Testando inser√ß√£o na tabela goals...');
        const testGoal = await Goal.create({
            user_id: testUser.id,
            client_id: testClient.id,
            factory: 'F√°brica Teste',
            value: 1000.00,
            quantity: 100,
            month: 8,
            year: 2025,
            created_at: new Date(),
            updated_at: new Date()
        });
        console.log(`‚úÖ Meta criada com sucesso! ID: ${testGoal.id}`);

        // Limpar dados de teste
        console.log('\nüßπ Removendo dados de teste...');
        await testGoal.destroy();
        await testSale.destroy();
        await testVisit.destroy();
        await testCheck.destroy();
        await testClient.destroy();
        await testUser.destroy();
        console.log('‚úÖ Dados de teste removidos com sucesso!');

        console.log('\nüéâ Valida√ß√£o do banco de dados conclu√≠da com sucesso!');
        console.log('‚úÖ Todas as inser√ß√µes foram realizadas sem erros.');
        console.log('‚úÖ A integridade referencial est√° funcionando corretamente.');
        console.log('‚úÖ O controle de √≠ndices est√° funcionando corretamente.');

    } catch (error) {
        console.error('‚ùå Erro durante a valida√ß√£o do banco de dados:', error);
        throw error;
    }
}

// Executar o script se chamado diretamente
if (require.main === module) {
    validateDatabase()
        .then(() => {
            console.log('\n‚úÖ Script executado com sucesso!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Erro na execu√ß√£o do script:', error);
            process.exit(1);
        });
}

module.exports = { validateDatabase };
