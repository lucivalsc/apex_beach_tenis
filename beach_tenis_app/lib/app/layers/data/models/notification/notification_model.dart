import 'package:intl/intl.dart';

///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class NotificationModelUndefinedDsAcaoCorretiva {
/*
{
  "type": "Buffer",
  "data": [
    -1
  ]
} 
*/

  String? type;
  List<int?>? data;

  NotificationModelUndefinedDsAcaoCorretiva({
    this.type,
    this.data,
  });
  NotificationModelUndefinedDsAcaoCorretiva.fromJson(
      Map<String, dynamic> json) {
    type = json['type']?.toString();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['data'] = arr0;
    }
    return data;
  }
}

class NotificationModelUndefinedDsEvento {
/*
{
  "type": "Buffer",
  "data": [
    80
  ]
} 
*/

  String? type;
  List<int?>? data;

  NotificationModelUndefinedDsEvento({
    this.type,
    this.data,
  });
  NotificationModelUndefinedDsEvento.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['data'] = arr0;
    }
    return data;
  }
}

class NotificationModelUndefined {
/*
{
  "cd_tolerabilidade": 20,
  "ds_tolerabilidade": "AUS�NCIA E/OU PREPARO INADEQUADO DO PTE ",
  "cd_Notification": 13370,
  "cd_setor_notificante": 2,
  "ds_setor_notificante": "Administra��o",
  "cd_setor_notificado": 2,
  "ds_setor_notificado": "Administra��o",
  "email_notificante": "administracao@hsfasaude.com.br",
  "email_notificado": "administracao@hsfasaude.com.br",
  "dt_Notification": "2023-03-13T21:38:00.000Z",
  "ds_classificacao": "EVENTO ADVERSO COM DANO LEVE",
  "cd_classificacao": 3,
  "ds_evento": {
    "type": "Buffer",
    "data": [
      80
    ]
  },
  "ds_acao_corretiva": {
    "type": "Buffer",
    "data": [
      -1
    ]
  },
  "cd_anexo": -1,
  "cor": "clTeal    ",
  "local_incidente": ""
} 
*/

  int? cdTolerabilidade;
  String? dsTolerabilidade;
  int? cdNotificao;
  int? cdSetorNotificante;
  String? dsSetorNotificante;
  int? cdSetorNotificado;
  String? dsSetorNotificado;
  String? emailNotificante;
  String? emailNotificado;
  String? dtNotification;
  String? dsClassificacao;
  int? cdClassificacao;
  NotificationModelUndefinedDsEvento? dsEvento;
  NotificationModelUndefinedDsAcaoCorretiva? dsAcaoCorretiva;
  int? cdAnexo;
  String? cor;
  String? localIncidente;
  String? dsSituacao;
  String? resposta;
  String? dtResposta;
  String? sexo;
  int? periodo;

  NotificationModelUndefined({
    this.cdTolerabilidade,
    this.dsTolerabilidade,
    this.cdNotificao,
    this.cdSetorNotificante,
    this.dsSetorNotificante,
    this.cdSetorNotificado,
    this.dsSetorNotificado,
    this.emailNotificante,
    this.emailNotificado,
    this.dtNotification,
    this.dsClassificacao,
    this.cdClassificacao,
    this.dsEvento,
    this.dsAcaoCorretiva,
    this.cdAnexo,
    this.cor,
    this.localIncidente,
    this.dsSituacao,
    this.resposta,
    this.dtResposta,
    this.sexo,
    this.periodo,
  });

  int calcularPeriodo(String? dtResposta, String dtNotificacao) {
    DateTime currentTimestamp = DateTime.now();
    DateTime dtNotificacaoParsed = DateTime.parse(dtNotificacao);

    if (dtResposta == null) {
      return dtNotificacaoParsed.difference(currentTimestamp).inDays;
    } else {
      DateTime dtRespostaParsed = DateTime.parse(dtResposta);
      return dtRespostaParsed.difference(dtNotificacaoParsed).inDays;
    }
  }

  NotificationModelUndefined.fromJson(Map<String, dynamic> json) {
    cdTolerabilidade = json['cd_tolerabilidade']?.toInt();
    dsTolerabilidade = json['ds_tolerabilidade']?.toString();
    cdNotificao = json['cd_notificacao']?.toInt();
    cdSetorNotificante = json['cd_setor_notificante']?.toInt();
    dsSetorNotificante = json['ds_setor_notificante']?.toString();
    cdSetorNotificado = json['cd_setor_notificado']?.toInt();
    dsSetorNotificado = json['ds_setor_notificado']?.toString();
    emailNotificante = json['email_notificante']?.toString();
    emailNotificado = json['email_notificado']?.toString();
    dtNotification =
        DateFormat('dd/MM/yyyy').format(DateTime.parse(json['dt_notificacao']));
    dsClassificacao = json['ds_classificacao']?.toString();
    cdClassificacao = json['cd_classificacao']?.toInt();
    dsEvento = (json['ds_evento'] != null)
        ? NotificationModelUndefinedDsEvento.fromJson(json['ds_evento'])
        : null;
    dsAcaoCorretiva = (json['ds_acao_corretiva'] != null)
        ? NotificationModelUndefinedDsAcaoCorretiva.fromJson(
            json['ds_acao_corretiva'])
        : null;
    cdAnexo = json['cd_anexo']?.toInt();
    cor = json['cor']?.toString();
    localIncidente = json['local_incidente']?.toString();
    dsSituacao = json['ds_situacao']?.toString();
    resposta = json['resposta']?.toString();
    dtResposta = json['dt_resposta'];
    sexo = json['sexo']?.toString();
    periodo = calcularPeriodo(dtResposta, json['dt_notificacao']);
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['cd_tolerabilidade'] = cdTolerabilidade;
    data['ds_tolerabilidade'] = dsTolerabilidade;
    data['cd_notificacao'] = cdNotificao;
    data['cd_setor_notificante'] = cdSetorNotificante;
    data['ds_setor_notificante'] = dsSetorNotificante;
    data['cd_setor_notificado'] = cdSetorNotificado;
    data['ds_setor_notificado'] = dsSetorNotificado;
    data['email_notificante'] = emailNotificante;
    data['email_notificado'] = emailNotificado;
    data['dt_notificacao'] = dtNotification;
    data['ds_classificacao'] = dsClassificacao;
    data['cd_classificacao'] = cdClassificacao;
    if (dsEvento != null) {
      data['ds_evento'] = dsEvento!.toJson();
    }
    if (dsAcaoCorretiva != null) {
      data['ds_acao_corretiva'] = dsAcaoCorretiva!.toJson();
    }
    data['cd_anexo'] = cdAnexo;
    data['cor'] = cor;
    data['local_incidente'] = localIncidente;
    data['ds_situacao'] = dsSituacao;
    data['resposta'] = resposta;
    data['dt_resposta'] = dtResposta;
    data['sexo'] = sexo;
    return data;
  }
}

class NotificationModel {
/*
{
  "undefined": [
    {
      "cd_tolerabilidade": 20,
      "ds_tolerabilidade": "AUS�NCIA E/OU PREPARO INADEQUADO DO PTE ",
      "cd_Notification": 13370,
      "cd_setor_notificante": 2,
      "ds_setor_notificante": "Administra��o",
      "cd_setor_notificado": 2,
      "ds_setor_notificado": "Administra��o",
      "email_notificante": "administracao@hsfasaude.com.br",
      "email_notificado": "administracao@hsfasaude.com.br",
      "dt_Notification": "2023-03-13T21:38:00.000Z",
      "ds_classificacao": "EVENTO ADVERSO COM DANO LEVE",
      "cd_classificacao": 3,
      "ds_evento": {
        "type": "Buffer",
        "data": [
          80
        ]
      },
      "ds_acao_corretiva": {
        "type": "Buffer",
        "data": [
          -1
        ]
      },
      "cd_anexo": -1,
      "cor": "clTeal    ",
      "local_incidente": ""
    }
  ]
} 
*/

  List<NotificationModelUndefined?>? undefined;

  NotificationModel({
    this.undefined,
  });
  NotificationModel.fromJson(Map<String, dynamic> json) {
    if (json['undefined'] != null) {
      final v = json['undefined'];
      final arr0 = <NotificationModelUndefined>[];
      v.forEach((v) {
        arr0.add(NotificationModelUndefined.fromJson(v));
      });
      undefined = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (undefined != null) {
      final v = undefined;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['undefined'] = arr0;
    }
    return data;
  }
}
